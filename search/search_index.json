{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Quick-DEV framework Intro Enhance Links Errata","title":"Introduction"},{"location":"#welcome-to-quick-dev-framework","text":"","title":"Welcome to Quick-DEV framework"},{"location":"#intro","text":"","title":"Intro"},{"location":"#enhance","text":"","title":"Enhance"},{"location":"#links","text":"","title":"Links"},{"location":"#errata","text":"","title":"Errata"},{"location":"api-reference/ble_apis/","text":"BLE (API List)","title":"BluetoothLE"},{"location":"api-reference/ble_apis/#ble-api-list","text":"","title":"BLE (API List)"},{"location":"api-reference/cloud_apis/","text":"Cloud (API List)","title":"Cloud"},{"location":"api-reference/cloud_apis/#cloud-api-list","text":"","title":"Cloud (API List)"},{"location":"api-reference/ota_apis/","text":"OTA (API List)","title":"OTA"},{"location":"api-reference/ota_apis/#ota-api-list","text":"","title":"OTA (API List)"},{"location":"api-reference/wifi_apis/","text":"WI-FI (API List)","title":"WI-FI"},{"location":"api-reference/wifi_apis/#wi-fi-api-list","text":"","title":"WI-FI (API List)"},{"location":"application-guide/ble/","text":"BluetoothLE BLE Manager BLE manager provide the auto-advertise option and handling the BLE status that make user eaiser to control BLE statment. Initialize Before using the BLE manager, please follow below steps to initiate. Step 1. Enable BLE manager #define BM_ENABLED (1) The definition been defined in qd_module.h in sys_config folder. Step 2. Add related file in Keil project Step 3. Register callback and init Add below program in app_main.c void APP_BleUnsolicitedCallback(uint16_t u16EvtType, T_OplErr tEvtRst, uint8_t *pu8Data, uint32_t u32DataLen) { switch(u16EvtType) { case USLCTED_CB_EVT_BLE_INIT: { // ble inited event // initialize ble advertise data APP_BleAdvDataInit(); // initialize ble scan response data APP_BleScanRspDataInit(); break; } case USLCTED_CB_EVT_BLE_ENT_ADVERTISE: { // enter advertising event break; } case USLCTED_CB_EVT_BLE_EXI_ADVERTISE: { // exit advertising event break; } case USLCTED_CB_EVT_BLE_CONNECTED: { // ble connected event break; } case USLCTED_CB_EVT_BLE_DISCONNECT: { // ble disconnect event break; } default: { // should not be here break; } } } void APP_BleInit(void) { // assign unsolicited callback function Opl_Ble_Uslctd_CB_Reg(&APP_BleUnsolicitedCallback); // register service GAP_Svc_Init(); GATT_Svc_Init(); // ...register your service here // initialize the ble manager (auto-adv) Opl_Ble_Init_Req(true); // user implement } The character of Opl_Ble_Init_Req() is to enable/disable auto-advertise function. If set as true - the auto-advertise will be enabled, and will directly start advertise after ble manager init done. While disconnect from connected state, ble manager will also start advertising, till user calling Opl_Ble_Stop_Req() . If set as false - the auto-advertise will be disabled, and will not advertise after ble manager init done. Info The APP_BleInit() function create by default in app_main.c , it's for developer to fill the ble related init function in it. Step 4. Setup advertise data void APP_BleAdvDataInit(void) { // ble advertise data inititate // user modify // * uint8_t au8BleAdvertData[]; // configure your own advertise data Opl_Ble_Advertise_Data_Set(au8BleAdvertData, lens); // * } Step 5. Setup scan response data Create scan response data init function, and modify your wishes data. void APP_BleScanRspDataInit(void) { // ble scan response data inititate // user modify // * uint8_t au8BleScanRspData[BLE_ADV_SCAN_BUF_SIZE]; // configure your own scan response data if(OPL_OK != Opl_Ble_ScanRsp_Data_Set(au8BleScanRspData, lens)) { OPL_LOG_ERRO(APP, \"Scan Rsp Data Set Fail\"); } // * } Step 6. Call set adv data & scan rsp data after init Call APP_BleAdvDataInit (created in step 4) and APP_BleScanRspDataInit (created in step 5) after recevied USLCTED_CB_EVT_BLE_INIT event in ble unsolicited callback. void APP_BleUnsolicitedCallback(uint16_t u16EvtType, T_OplErr tEvtRst, uint8_t *pu8Data, uint32_t u32DataLen) { switch(u16EvtType) { case USLCTED_CB_EVT_BLE_INIT: { // ble inited event // initialize ble advertise data APP_BleAdvDataInit(); // <--- // initialize ble scan response data APP_BleScanRspDataInit(); // <--- break; } Unsolicited callback The unsolicited callback will content with ble status and carried the result in each state. Info Unsolicited callback prototype located in ble_mngr_api.h Register service Descript how to create the service file How To... How to 1... How to 2...","title":"BluetoothLE"},{"location":"application-guide/ble/#bluetoothle","text":"","title":"BluetoothLE"},{"location":"application-guide/ble/#ble-manager","text":"BLE manager provide the auto-advertise option and handling the BLE status that make user eaiser to control BLE statment.","title":"BLE Manager"},{"location":"application-guide/ble/#initialize","text":"Before using the BLE manager, please follow below steps to initiate.","title":"Initialize"},{"location":"application-guide/ble/#step-1-enable-ble-manager","text":"#define BM_ENABLED (1) The definition been defined in qd_module.h in sys_config folder.","title":"Step 1. Enable BLE manager"},{"location":"application-guide/ble/#step-2-add-related-file-in-keil-project","text":"","title":"Step 2. Add related file in Keil project"},{"location":"application-guide/ble/#step-3-register-callback-and-init","text":"Add below program in app_main.c void APP_BleUnsolicitedCallback(uint16_t u16EvtType, T_OplErr tEvtRst, uint8_t *pu8Data, uint32_t u32DataLen) { switch(u16EvtType) { case USLCTED_CB_EVT_BLE_INIT: { // ble inited event // initialize ble advertise data APP_BleAdvDataInit(); // initialize ble scan response data APP_BleScanRspDataInit(); break; } case USLCTED_CB_EVT_BLE_ENT_ADVERTISE: { // enter advertising event break; } case USLCTED_CB_EVT_BLE_EXI_ADVERTISE: { // exit advertising event break; } case USLCTED_CB_EVT_BLE_CONNECTED: { // ble connected event break; } case USLCTED_CB_EVT_BLE_DISCONNECT: { // ble disconnect event break; } default: { // should not be here break; } } } void APP_BleInit(void) { // assign unsolicited callback function Opl_Ble_Uslctd_CB_Reg(&APP_BleUnsolicitedCallback); // register service GAP_Svc_Init(); GATT_Svc_Init(); // ...register your service here // initialize the ble manager (auto-adv) Opl_Ble_Init_Req(true); // user implement } The character of Opl_Ble_Init_Req() is to enable/disable auto-advertise function. If set as true - the auto-advertise will be enabled, and will directly start advertise after ble manager init done. While disconnect from connected state, ble manager will also start advertising, till user calling Opl_Ble_Stop_Req() . If set as false - the auto-advertise will be disabled, and will not advertise after ble manager init done. Info The APP_BleInit() function create by default in app_main.c , it's for developer to fill the ble related init function in it.","title":"Step 3. Register callback and init"},{"location":"application-guide/ble/#step-4-setup-advertise-data","text":"void APP_BleAdvDataInit(void) { // ble advertise data inititate // user modify // * uint8_t au8BleAdvertData[]; // configure your own advertise data Opl_Ble_Advertise_Data_Set(au8BleAdvertData, lens); // * }","title":"Step 4. Setup advertise data"},{"location":"application-guide/ble/#step-5-setup-scan-response-data","text":"Create scan response data init function, and modify your wishes data. void APP_BleScanRspDataInit(void) { // ble scan response data inititate // user modify // * uint8_t au8BleScanRspData[BLE_ADV_SCAN_BUF_SIZE]; // configure your own scan response data if(OPL_OK != Opl_Ble_ScanRsp_Data_Set(au8BleScanRspData, lens)) { OPL_LOG_ERRO(APP, \"Scan Rsp Data Set Fail\"); } // * }","title":"Step 5. Setup scan response data"},{"location":"application-guide/ble/#step-6-call-set-adv-data-scan-rsp-data-after-init","text":"Call APP_BleAdvDataInit (created in step 4) and APP_BleScanRspDataInit (created in step 5) after recevied USLCTED_CB_EVT_BLE_INIT event in ble unsolicited callback. void APP_BleUnsolicitedCallback(uint16_t u16EvtType, T_OplErr tEvtRst, uint8_t *pu8Data, uint32_t u32DataLen) { switch(u16EvtType) { case USLCTED_CB_EVT_BLE_INIT: { // ble inited event // initialize ble advertise data APP_BleAdvDataInit(); // <--- // initialize ble scan response data APP_BleScanRspDataInit(); // <--- break; }","title":"Step 6. Call set adv data &amp; scan rsp data after init"},{"location":"application-guide/ble/#unsolicited-callback","text":"The unsolicited callback will content with ble status and carried the result in each state. Info Unsolicited callback prototype located in ble_mngr_api.h","title":"Unsolicited callback"},{"location":"application-guide/ble/#register-service","text":"Descript how to create the service file","title":"Register service"},{"location":"application-guide/ble/#how-to","text":"How to 1... How to 2...","title":"How To..."},{"location":"application-guide/board_config/","text":"Board Configuration Descript","title":"Board Configuration"},{"location":"application-guide/board_config/#board-configuration","text":"Descript","title":"Board Configuration"},{"location":"application-guide/cloud/","text":"Cloud Cloud Template Descript Porting rule How To...","title":"Cloud"},{"location":"application-guide/cloud/#cloud","text":"","title":"Cloud"},{"location":"application-guide/cloud/#cloud-template","text":"Descript","title":"Cloud Template"},{"location":"application-guide/cloud/#porting-rule","text":"","title":"Porting rule"},{"location":"application-guide/cloud/#how-to","text":"","title":"How To..."},{"location":"application-guide/log_config/","text":"Log Configuration Descript How To..","title":"Log Configuration"},{"location":"application-guide/log_config/#log-configuration","text":"Descript","title":"Log Configuration"},{"location":"application-guide/log_config/#how-to","text":"","title":"How To.."},{"location":"application-guide/mp/","text":"MP","title":"MP"},{"location":"application-guide/mp/#mp","text":"","title":"MP"},{"location":"application-guide/ota/","text":"OTA OTA via BLE OTA via WI-FI Hot To... How to 1... How to 2...","title":"OTA"},{"location":"application-guide/ota/#ota","text":"","title":"OTA"},{"location":"application-guide/ota/#ota-via-ble","text":"","title":"OTA via BLE"},{"location":"application-guide/ota/#ota-via-wi-fi","text":"","title":"OTA via WI-FI"},{"location":"application-guide/ota/#hot-to","text":"How to 1... How to 2...","title":"Hot To..."},{"location":"application-guide/project_config/","text":"Project Configuration Descript About 'qd_config.h' Content 1.. About 'qd_module.h' Content 2..","title":"Project Configuration"},{"location":"application-guide/project_config/#project-configuration","text":"Descript","title":"Project Configuration"},{"location":"application-guide/project_config/#about-qd_configh","text":"Content 1..","title":"About 'qd_config.h'"},{"location":"application-guide/project_config/#about-qd_moduleh","text":"Content 2..","title":"About 'qd_module.h'"},{"location":"application-guide/wifi/","text":"WI-FI Descript of WI-FI manager & Network Manager & Auto-Connect WI-FI Manager WI-FI manager provide a easy way to control WI-FI Initialize Before using the WI-FI manager, please follow below steps to initiate. Step 1. Enable WI-FI manager #define WM_ENABLED (1) The definition been defined in qd_module.h in sys_config folder. Step 2. Add related files in Keil project Step 3. Register callback and init Add below program in app_main.c void APP_WmUnsolicitedCallback(T_WmUslctedEvtType tEvtType, T_OplErr tEvtRst, uint8_t *pu8Data, uint32_t u32DataLen) { // tEvtType refer to wifi_mngr_api.h switch(tEvtType) { case USLCTED_CB_EVT_WIFI_UP: { // wifi connected event break; } case USLCTED_CB_EVT_WIFI_DOWN: { // wifi disconnect event break; } case USLCTED_CB_EVT_WIFI_RESET: { // wifi reset event break; } case USLCTED_CB_EVT_GOT_IP: { // wifi got ip break; } } } void APP_WifiInitDoneIndCallback(T_OplErr tEvtRst) { APP_SendMessage(APP_EVT_WIFI_INIT_DONE, (uint8_t*)&tEvtRst, sizeof(T_OplErr)); } void APP_NetInit(void) { // register Wi-Fi unsolicited callback if(OPL_OK != Opl_Wifi_Uslctd_CB_Reg(APP_WmUnsolicitedCallback)) { OPL_LOG_ERRO(APP, \"Wi-Fi unsolicited callback regist fail\"); } // Wi-Fi manager initialize Opl_Wifi_Init_Req(APP_WifiInitDoneIndCallback); // user implement } Info The APP_NetInit() function create by default in app_main.c , it's for developer to fill the network related init function in it. Unsolicited callback & Indicate callback There're two types of callback function pointer can be assign to WI-FI manager Unsolicited callback - Used for recving unsolicited events from WI-FI, will happens in WI-FI connected/ disconnected/ reset/ got ip. Unsolicited callback carried... Event, Result, Data & DataLens (Descript) Indicate callback - Used for getting solicited events of each request to send to WI-FI manager (such as scan_req). Indicate callback carried... Result (Descript) Info Unsolicited callback & Indicate callback prototype located in wifi_mngr_api.h Network Manager Network manager can handling wifi manager & auto-connect interactive behavior to let user only care about triggering WI-FI scan request and connect request. Initialize Before using the network manager, please follow below steps to initiate. Step 1. Enable network manager #define WM_ENABLED (1) #define NM_ENABLED (1) #define AC_ENABLED (1) The definition been defined in qd_config.h in sys_config folder. Warning WM_ENABLED and AC_ENABLED are both required if using network manager. Step 2. Add related files in Keil project Step 3. Register callback and init Add below program in app_main.c void APP_NmUnsolicitedCallback(T_NmUslctdEvtType tEvtType, uint8_t *pu8Data, uint32_t u32DataLen) { // tEvtType refer to net_mngr_api.h switch(tEvtType) { case NM_USLCTD_EVT_NETWORK_UP: { // wifi connected & got ip event break; } case NM_USLCTD_EVT_NETWORK_DOWN: { // wifi disconnect event break; } case NM_USLCTD_EVT_NETWORK_RESET: { // wifi reset event break; } default: { // should not be here break; } } } void APP_NetInit(void) { // Network manager initialize (auto-connect enable) APP_NmInit(true, &APP_NmUnsolicitedCallback); // user implement } The first character of APP_NmInit() is to enable/disable auto-connect at started. If set as true - the auto-connect will directly content in sequence. If set as false - the auto-connect won't active. Info The APP_NetInit() function create by default in app_main.c , it's for developer to fill the network related init function in it. Unsolicited callback & Indicate callback There're two types of callback function pointer can be assign to Network manager Unsolicited callback - Used for recving unsolicited events from WI-FI, will happens in WI-FI connected/ disconnected/ reset. Unsolicited callback carried... Event, Result, Data & DataLens (Descript) Indicate callback - Used for getting solicited events of each request to send to WI-FI manager (such as scan_req). Indicate callback carried... Result (Descript) Info Unsolicited callback & Indicate callback prototype located in nm_mngr_api.h Auto-Connect The auto-connect will do automatically connect to stored AP while the WI-FI connection offline, and will periodcially to retry till connected or been disable. Initialize Enable auto-connect and add related file into Keil project #define WM_ENABLED (1) #define AC_ENABLED (1) Image How To... How to 1... How to 2...","title":"WI-Fi"},{"location":"application-guide/wifi/#wi-fi","text":"Descript of WI-FI manager & Network Manager & Auto-Connect","title":"WI-FI"},{"location":"application-guide/wifi/#wi-fi-manager","text":"WI-FI manager provide a easy way to control WI-FI","title":"WI-FI Manager"},{"location":"application-guide/wifi/#initialize","text":"Before using the WI-FI manager, please follow below steps to initiate.","title":"Initialize"},{"location":"application-guide/wifi/#step-1-enable-wi-fi-manager","text":"#define WM_ENABLED (1) The definition been defined in qd_module.h in sys_config folder.","title":"Step 1. Enable WI-FI manager"},{"location":"application-guide/wifi/#step-2-add-related-files-in-keil-project","text":"","title":"Step 2. Add related files in Keil project"},{"location":"application-guide/wifi/#step-3-register-callback-and-init","text":"Add below program in app_main.c void APP_WmUnsolicitedCallback(T_WmUslctedEvtType tEvtType, T_OplErr tEvtRst, uint8_t *pu8Data, uint32_t u32DataLen) { // tEvtType refer to wifi_mngr_api.h switch(tEvtType) { case USLCTED_CB_EVT_WIFI_UP: { // wifi connected event break; } case USLCTED_CB_EVT_WIFI_DOWN: { // wifi disconnect event break; } case USLCTED_CB_EVT_WIFI_RESET: { // wifi reset event break; } case USLCTED_CB_EVT_GOT_IP: { // wifi got ip break; } } } void APP_WifiInitDoneIndCallback(T_OplErr tEvtRst) { APP_SendMessage(APP_EVT_WIFI_INIT_DONE, (uint8_t*)&tEvtRst, sizeof(T_OplErr)); } void APP_NetInit(void) { // register Wi-Fi unsolicited callback if(OPL_OK != Opl_Wifi_Uslctd_CB_Reg(APP_WmUnsolicitedCallback)) { OPL_LOG_ERRO(APP, \"Wi-Fi unsolicited callback regist fail\"); } // Wi-Fi manager initialize Opl_Wifi_Init_Req(APP_WifiInitDoneIndCallback); // user implement } Info The APP_NetInit() function create by default in app_main.c , it's for developer to fill the network related init function in it.","title":"Step 3. Register callback and init"},{"location":"application-guide/wifi/#unsolicited-callback-indicate-callback","text":"There're two types of callback function pointer can be assign to WI-FI manager Unsolicited callback - Used for recving unsolicited events from WI-FI, will happens in WI-FI connected/ disconnected/ reset/ got ip. Unsolicited callback carried... Event, Result, Data & DataLens (Descript) Indicate callback - Used for getting solicited events of each request to send to WI-FI manager (such as scan_req). Indicate callback carried... Result (Descript) Info Unsolicited callback & Indicate callback prototype located in wifi_mngr_api.h","title":"Unsolicited callback &amp; Indicate callback"},{"location":"application-guide/wifi/#network-manager","text":"Network manager can handling wifi manager & auto-connect interactive behavior to let user only care about triggering WI-FI scan request and connect request.","title":"Network Manager"},{"location":"application-guide/wifi/#initialize_1","text":"Before using the network manager, please follow below steps to initiate.","title":"Initialize"},{"location":"application-guide/wifi/#step-1-enable-network-manager","text":"#define WM_ENABLED (1) #define NM_ENABLED (1) #define AC_ENABLED (1) The definition been defined in qd_config.h in sys_config folder. Warning WM_ENABLED and AC_ENABLED are both required if using network manager.","title":"Step 1. Enable network manager"},{"location":"application-guide/wifi/#step-2-add-related-files-in-keil-project_1","text":"","title":"Step 2. Add related files in Keil project"},{"location":"application-guide/wifi/#step-3-register-callback-and-init_1","text":"Add below program in app_main.c void APP_NmUnsolicitedCallback(T_NmUslctdEvtType tEvtType, uint8_t *pu8Data, uint32_t u32DataLen) { // tEvtType refer to net_mngr_api.h switch(tEvtType) { case NM_USLCTD_EVT_NETWORK_UP: { // wifi connected & got ip event break; } case NM_USLCTD_EVT_NETWORK_DOWN: { // wifi disconnect event break; } case NM_USLCTD_EVT_NETWORK_RESET: { // wifi reset event break; } default: { // should not be here break; } } } void APP_NetInit(void) { // Network manager initialize (auto-connect enable) APP_NmInit(true, &APP_NmUnsolicitedCallback); // user implement } The first character of APP_NmInit() is to enable/disable auto-connect at started. If set as true - the auto-connect will directly content in sequence. If set as false - the auto-connect won't active. Info The APP_NetInit() function create by default in app_main.c , it's for developer to fill the network related init function in it.","title":"Step 3. Register callback and init"},{"location":"application-guide/wifi/#unsolicited-callback-indicate-callback_1","text":"There're two types of callback function pointer can be assign to Network manager Unsolicited callback - Used for recving unsolicited events from WI-FI, will happens in WI-FI connected/ disconnected/ reset. Unsolicited callback carried... Event, Result, Data & DataLens (Descript) Indicate callback - Used for getting solicited events of each request to send to WI-FI manager (such as scan_req). Indicate callback carried... Result (Descript) Info Unsolicited callback & Indicate callback prototype located in nm_mngr_api.h","title":"Unsolicited callback &amp; Indicate callback"},{"location":"application-guide/wifi/#auto-connect","text":"The auto-connect will do automatically connect to stored AP while the WI-FI connection offline, and will periodcially to retry till connected or been disable.","title":"Auto-Connect"},{"location":"application-guide/wifi/#initialize_2","text":"Enable auto-connect and add related file into Keil project #define WM_ENABLED (1) #define AC_ENABLED (1) Image","title":"Initialize"},{"location":"application-guide/wifi/#how-to","text":"How to 1... How to 2...","title":"How To..."},{"location":"application-guide/wifi_provision_via_ble/","text":"WI-FI provision via BLE Descript Provision Sequence Seq How To... How To 1... How To 2...","title":"WI-FI Provision Via BLE"},{"location":"application-guide/wifi_provision_via_ble/#wi-fi-provision-via-ble","text":"Descript","title":"WI-FI provision via BLE"},{"location":"application-guide/wifi_provision_via_ble/#provision-sequence","text":"Seq","title":"Provision Sequence"},{"location":"application-guide/wifi_provision_via_ble/#how-to","text":"How To 1... How To 2...","title":"How To..."},{"location":"get_started/get_started/","text":"Get Started Overview -examples : example applications -quick_dev : Quick-Dev framework program -sdk : Opulinks chip SDK Step 1. SDK download and install Download SDK you needed in Opulinks Github OPL1000_A3: https://github.com/Opulinks-Tech/OPL1000A3-SDK OPL2500_A0: After downloaded, the folder struct of SDK will look like below screenshot. Copy below folder into QD_FWK\\sdk\\ FW_Pack SDK Tool Step 2. Start your first application Now the sdk prepared and ready to go, open the qd_app project in : QD_FWK\\examples\\start_up\\qd_app then into the folder base on the sdk version you just inserted. For example: If download the OPL1000_A3 sdk, then open opl1000_a3 folder in qd_app project. If download the OPL2500_A0 sdk, then open opl2500_a0 folder in qd_app project. Other sdk version likewise. Open qd_app_m3.uvprojx to start Keil application. Step 3. Connect ot Dev-Kit Connect the Dev-Kit via micro-USB Step 4. Configuration setup According to Introduction mention, QD_FWK provide system configure file and module configure option file. To know the detail of the configure file, please check Project Configuration And both file qd_config.h & qd_module.h can be checked in qd_app project. Step 5. Build project Click Build and Rebuild button to compiler project. Output file qd_app_m3.bin located at <project root>\\Output\\Object\\ . Step 6. Download firmware Open download_RELEASE download tool located in sdk\\Tools\\Download\\ In Pack tag insert Script, M0 Bin, M3 Bin files. Script -> PatchData.txt ( sdk\\FW_Pack\\ ) M0 Bin -> opl1000_m0.bin ( sdk\\FW_Pack\\ ) M3 Bin -> qd_app_m3.bin ( <project root>\\Output\\Object ) Will generate opl1000.bin in sdk\\Tool\\Download\\Patch after click Pack button. In OTA tag insert OTA loader, OPL1000 Bin files. OTA loader -> opl1000_ota_loader.bin ( sdk\\FW_Pack\\ ) OPL1000 Bin -> opl1000.bin ( sdk\\Tool\\Download\\Patch\\ ) Product ID -> select to the target chip series ID. Chip ID -> select to the target chip ID. Firmware ID -> number of current project version. Checksum -> auto-calculated. Will generate opl1000_ota.bin in sdk\\Tool\\Download\\Patch after click Build OTA Image button. Select UART Port in UART Setting block which connected to Dev-Kit In Download tag insert Patch Bin file to download. Patch Bin -> opl1000_ota.bin ( sdk\\Tool\\Download\\Patch ) Click download and press reset button on Dev-Kit. Step 7. Get log Open terminal (such as Tera-Term or Putty application) and connect to the target COM port and press reset button on Dev-Kit.","title":"Get Started"},{"location":"get_started/get_started/#get-started","text":"","title":"Get Started"},{"location":"get_started/get_started/#overview","text":"-examples : example applications -quick_dev : Quick-Dev framework program -sdk : Opulinks chip SDK","title":"Overview"},{"location":"get_started/get_started/#step-1-sdk-download-and-install","text":"Download SDK you needed in Opulinks Github OPL1000_A3: https://github.com/Opulinks-Tech/OPL1000A3-SDK OPL2500_A0: After downloaded, the folder struct of SDK will look like below screenshot. Copy below folder into QD_FWK\\sdk\\ FW_Pack SDK Tool","title":"Step 1. SDK download and install"},{"location":"get_started/get_started/#step-2-start-your-first-application","text":"Now the sdk prepared and ready to go, open the qd_app project in : QD_FWK\\examples\\start_up\\qd_app then into the folder base on the sdk version you just inserted. For example: If download the OPL1000_A3 sdk, then open opl1000_a3 folder in qd_app project. If download the OPL2500_A0 sdk, then open opl2500_a0 folder in qd_app project. Other sdk version likewise. Open qd_app_m3.uvprojx to start Keil application.","title":"Step 2. Start your first application"},{"location":"get_started/get_started/#step-3-connect-ot-dev-kit","text":"Connect the Dev-Kit via micro-USB","title":"Step 3. Connect ot Dev-Kit"},{"location":"get_started/get_started/#step-4-configuration-setup","text":"According to Introduction mention, QD_FWK provide system configure file and module configure option file. To know the detail of the configure file, please check Project Configuration And both file qd_config.h & qd_module.h can be checked in qd_app project.","title":"Step 4. Configuration setup"},{"location":"get_started/get_started/#step-5-build-project","text":"Click Build and Rebuild button to compiler project. Output file qd_app_m3.bin located at <project root>\\Output\\Object\\ .","title":"Step 5. Build project"},{"location":"get_started/get_started/#step-6-download-firmware","text":"Open download_RELEASE download tool located in sdk\\Tools\\Download\\ In Pack tag insert Script, M0 Bin, M3 Bin files. Script -> PatchData.txt ( sdk\\FW_Pack\\ ) M0 Bin -> opl1000_m0.bin ( sdk\\FW_Pack\\ ) M3 Bin -> qd_app_m3.bin ( <project root>\\Output\\Object ) Will generate opl1000.bin in sdk\\Tool\\Download\\Patch after click Pack button. In OTA tag insert OTA loader, OPL1000 Bin files. OTA loader -> opl1000_ota_loader.bin ( sdk\\FW_Pack\\ ) OPL1000 Bin -> opl1000.bin ( sdk\\Tool\\Download\\Patch\\ ) Product ID -> select to the target chip series ID. Chip ID -> select to the target chip ID. Firmware ID -> number of current project version. Checksum -> auto-calculated. Will generate opl1000_ota.bin in sdk\\Tool\\Download\\Patch after click Build OTA Image button. Select UART Port in UART Setting block which connected to Dev-Kit In Download tag insert Patch Bin file to download. Patch Bin -> opl1000_ota.bin ( sdk\\Tool\\Download\\Patch ) Click download and press reset button on Dev-Kit.","title":"Step 6. Download firmware"},{"location":"get_started/get_started/#step-7-get-log","text":"Open terminal (such as Tera-Term or Putty application) and connect to the target COM port and press reset button on Dev-Kit.","title":"Step 7. Get log"}]}